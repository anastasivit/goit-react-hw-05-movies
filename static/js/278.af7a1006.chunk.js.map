{"version":3,"file":"static/js/278.af7a1006.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MoviesListContainer = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const MovieItem = styled.li`\n  margin-bottom: 16px;\n`;\n\nexport const MovieLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  &:hover {\n    color: orangered;\n  }\n`;\n\nexport const MovieTitle = styled.h2`\n  margin: 0;\n  font-size: 18px;\n`;\n\nexport default MoviesListContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MoviesListContainer,\n  MovieItem,\n  MovieLink,\n  MovieTitle,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListContainer>\n      {movies.map(movie => (\n        <MovieItem key={movie.id}>\n          <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n            <MovieTitle>{movie.title}</MovieTitle>\n          </MovieLink>\n        </MovieItem>\n      ))}\n    </MoviesListContainer>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MoviesList;\n","import { MoviesList } from '../../components/MoviesList/MoviesList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from '../../services/api';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const searchQuery = searchParams.get('query');\n    if (!searchQuery) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    getMoviesByQuery(searchQuery)\n      .then(setMovies)\n      .finally(() => {\n        setIsLoading(false);\n        setSearchParams({ query: searchQuery });\n      });\n  }, [searchParams, setSearchParams]); // Вказано searchParams і setSearchParams як залежності\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (!query) {\n      return;\n    }\n    setSearchParams({ query });\n  };\n\n  const handleChange = evt => {\n    setQuery(evt.target.value);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>Movies</div>\n        <input type=\"text\" name=\"query\" value={query} onChange={handleChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : movies.length === 0 ? (\n        <p>No movies found.</p>\n      ) : (\n        <MoviesList movies={movies}></MoviesList>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const API_KEY = 'a671f7524d97836b3853115348c4c13a';\n\nexport async function fetchTrendingMovies() {\n  const resp = await axios.get('/trending/movie/week?', {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return resp.data.results;\n}\n\nexport async function getMoviesByQuery(query) {\n  const resp = axios.get(\n    `/search/movie?&language=en-US&query=${query}&page=1&include_adult=false`,\n    {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    }\n  );\n  return (await resp).data.results;\n}\n\nexport async function getMoviesDetails(id) {\n  const resp = axios.get(`/movie/${id}?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return (await resp).data;\n}\n\nexport async function getMoviesCast(id) {\n  const resp = axios.get(`/movie/${id}/credits?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return (await resp).data.cast;\n}\n\nexport async function getMoviesReviews(id) {\n  const resp = axios.get(`/movie/${id}/reviews?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return (await resp).data.results;\n}\n"],"names":["MoviesListContainer","styled","ul","_templateObject","_taggedTemplateLiteral","MovieItem","li","_templateObject2","MovieLink","NavLink","_templateObject3","MovieTitle","h2","_templateObject4","MoviesList","_ref","movies","location","useLocation","_jsx","children","map","movie","to","concat","id","state","from","title","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","setMovies","_useState5","_useState6","isLoading","setIsLoading","useEffect","searchQuery","get","getMoviesByQuery","then","finally","_jsxs","onSubmit","evt","preventDefault","type","name","value","onChange","target","length","axios","defaults","baseURL","API_KEY","fetchTrendingMovies","_fetchTrendingMovies","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resp","wrap","_context","prev","next","params","api_key","page","sent","abrupt","data","results","stop","_x","_getMoviesByQuery","_callee2","_context2","getMoviesDetails","_x2","_getMoviesDetails","_callee3","_context3","getMoviesCast","_x3","_getMoviesCast","_callee4","_context4","cast","getMoviesReviews","_x4","_getMoviesReviews","_callee5","_context5"],"sourceRoot":""}